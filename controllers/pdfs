const Campground =require("../models/pdf");
const mbxGeocoding = require('@mapbox/mapbox-sdk/services/geocoding');
const mapBoxToken=process.env.MAPBOX_TOKEN;
const geocoder=mbxGeocoding({accessToken: mapBoxToken});
const {cloudinary}=require("../cloudinary");

module.exports.index=async(req,res)=>{
    const campgrounds=await Campground.find({});
    res.render('campgrounds/index',{campgrounds})
}

module.exports.renderNewForm=(req,res)=>{   
    res.render('campgrounds/new');
}

module.exports.createCampground=async(req,res,next)=>{
    const campgrounds= new Campground(req.body.campgrounds);
    campgrounds.image=req.files.map(f=>({url:f.path,filename:f.filename}));
    campgrounds.author=req.user._id;
    await campgrounds.save();
    console.log(campgrounds);
    req.flash('success', 'Successfully uploaded a new pdf')
    res.redirect(`/pdfs/${campgrounds._id}`)
}

module.exports.showCampground=async(req,res)=>{
    const campgrounds=await Campground.findById(req.params.id).populate({
        path:'review',
        populate:{
            path:'author'
        }
    }).populate('author');
    // console.log(campgrounds);
    if(!campgrounds){
    req.flash('error','cannot find');
    return res.redirect('/pdfs');
   }
    res.render('campgrounds/show',{campgrounds})
}
module.exports.renderEditForm=async(req,res)=>{
    const campgrounds =await Campground.findById(req.params.id);
    if(!campgrounds){
        req.flash('error','cannot find');
        return res.redirect('/pdfs');
       }
    res.render('campgrounds/edit',{campgrounds})
}

module.exports.updateCampground = async (req, res) => {
    const { id } = req.params;
    console.log(req.body);
    
    try {
      const campgrounds = await Campground.findByIdAndUpdate(id, { ...req.body.campgrounds });
      const img = req.files.map(f => ({ url: f.path, filename: f.filename }));
  
      // Check if campgrounds.campgrounds is defined, and if not, initialize it as an empty array
      campgrounds.campgrounds = campgrounds.campgrounds || [];
      campgrounds.campgrounds.push(...img);
      await campgrounds.save();
  
      if (req.body.deleteImages) {
        for (let filename of req.body.deleteImages) {
          await cloudinary.uploader.destroy(filename);
        }
        await campgrounds.updateOne({ $pull: { image: { filename: { $in: req.body.deleteImages } } } });
      }
  
      req.flash('success', 'Successfully updated pdf');
      res.redirect(`/pdfs/${campgrounds._id}`);
    } catch (err) {
      // Handle the error appropriately
      console.error(err);
      req.flash('error', 'Failed to update campground');
      res.redirect('/'); // Redirect to an appropriate page
    }
  };
  

module.exports.deleteCampground=async(req,res)=>{
    const { id } = req.params;
    const campgrounds =await Campground.findByIdAndDelete(id);
    req.flash('success','successfully deleted')
    res.redirect('/pdfs');
}
